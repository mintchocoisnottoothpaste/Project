libname raw "/userdata20/rroom029/data_source/user_data";/*raw data*/
libname db "/userdata20/rroom029/data_out/data_store"; 
libname db_out "/userdata20/rroom029/data_out/data_out";


/****** CONTROL(CASE_YN=0)에서 T20에 C코드와 산정특례가 동시에 기록된 사람 ******/
%MACRO MONTHLY(STRT, STP);
%DO YM=&STRT. %TO &STP.;
%IF %SUBSTR(&YM,5)=13 %THEN %LET YM=%EVAL(%SUBSTR(&YM,1,4)+1)01;
%IF &YM.=&STRT. %THEN %DO; %LET CREATE_OR_INSERT=CREATE TABLE; %LET AS_YN=AS; %END;
%ELSE %DO; %LET CREATE_OR_INSERT=INSERT INTO; %LET AS_YN=; %END;
PROC SQL; &CREATE_OR_INSERT. CONTROL_T20 &AS_YN. 
SELECT DISTINCT A.INDI_DSCM_NO, CMN_KEY
	, SICK_SYM1, SICK_SYM2, SICK_SYM3, SICK_SYM4, SICK_SYM5
	, MDCARE_STRT_DT, SPCF_SYM_TYPE
FROM RAW.TARGET_REQ202102931 AS A /*데이터명 수정*/
INNER JOIN RAW.T20_&YM. AS B
ON A.INDI_DSCM_NO=B.INDI_DSCM_NO
WHERE CASE_YN=0 AND SUBSTR(SPCF_SYM_TYPE,1,4) IN ('V011', 'V027', 'V193', 'V194') /*AND
			(SUBSTR(SICK_SYM1,1,1) IN ('C') OR
			 SUBSTR(SICK_SYM2,1,1) IN ('C') OR
			 SUBSTR(SICK_SYM3,1,1) IN ('C') OR
			 SUBSTR(SICK_SYM4,1,1) IN ('C') OR
			 SUBSTR(SICK_SYM5,1,1) IN ('C'))*/
; QUIT;
%END; %MEND MONTHLY; 
%MONTHLY(STRT=200201, STP=202012);

PROC SQL; CREATE TABLE CONTROL_CV AS SELECT DISTINCT INDI_DSCM_NO FROM CONTROL_T20 ; QUIT;


/****** STEP2. T40에서 상병코드 붙이기 ******/
%MACRO MONTHLY(STRT, STP);
%DO YM=&STRT. %TO &STP.;
%IF %SUBSTR(&YM,5)=13 %THEN %LET YM=%EVAL(%SUBSTR(&YM,1,4)+1)01;
%IF &YM.=&STRT. %THEN %DO; %LET CREATE_OR_INSERT=CREATE TABLE; %LET AS_YN=AS; %END;
%ELSE %DO; %LET CREATE_OR_INSERT=INSERT INTO; %LET AS_YN=; %END;
PROC SQL; &CREATE_OR_INSERT. TARGET_T40 &AS_YN. 
SELECT DISTINCT A.*, B.MCEX_SICK_SYM
FROM CONTROL_T20 AS A
INNER JOIN RAW.T40_&YM. AS B
ON A.CMN_KEY=B.CMN_KEY
; QUIT;
%END; %MEND MONTHLY; 
%MONTHLY(STRT=200201, STP=202012);


PROC SQL; CREATE TABLE CONTROL_CV AS SELECT DISTINCT INDI_DSCM_NO/*, MCEX_SICK_SYM, SPCF_SYM_TYPE*/ FROM TARGET_T40
WHERE SUBSTR(MCEX_SICK_SYM,1,1) IN ('C') AND SUBSTR(SPCF_SYM_TYPE,1,4) IN ('V011', 'V027', 'V193', 'V194') ORDER BY INDI_DSCM_NO ; QUIT;

PROC SQL; CREATE TABLE CONTROL_BASE AS SELECT DISTINCT INDI_DSCM_NO, CASE_YN FROM RAW.TARGET_REQ202102931 WHERE CASE_YN=0 ORDER BY INDI_DSCM_NO ; QUIT;

DATA DB.CTRL_INDI; MERGE CONTROL_BASE (IN=A) CONTROL_CV (IN=B); BY INDI_DSCM_NO; IF A=1 AND B^=1; RUN;
PROC SORT DATA=DB.CTRL_INDI; BY INDI_DSCM_NO;RUN;


/*빈 데이터셋*/ DATA MATCHOUT_2009; INPUT INDI_DSCM_NO CASE_YN SEX_TYPE$ AGE_GRP MATCH_ID; DATALINES;RUN;

%LET YEAR=2010;
%MACRO MATCH(YEAR);

/*CTRL준비*/
DATA CTRL_INDI_&YEAR.(KEEP=INDI_DSCM_NO CASE_YN); MERGE DB.CTRL_INDI (IN=A) MATCHOUT_2009-MATCHOUT_%EVAL(&YEAR.-1) (IN=B); BY INDI_DSCM_NO ; IF A=1 AND B^=1; RUN;

PROC SQL; CREATE TABLE CTRL_BFC_&YEAR. AS
SELECT DISTINCT A.*, B.STD_YYYY, B.BYEAR, B.SEX_TYPE
FROM CTRL_INDI_&YEAR. AS A
INNER JOIN RAW.BFC_&YEAR. AS B
ON A.INDI_DSCM_NO=B.INDI_DSCM_NO 
WHERE B.SEX_TYPE IS NOT NULL AND B.BYEAR IS NOT NULL AND RVSN_ADDR_CD IS NOT NULL /*성별 출생연도 거주코드 없는것 제거*/
; QUIT;

DATA CTRL_BFC_&YEAR. (KEEP=INDI_DSCM_NO C_AGE AGE_GRP SEX_TYPE CASE_YN); 
SET CTRL_BFC_&YEAR.; 
B_YEAR=INPUT(BYEAR,10.); C_AGE=&YEAR.-B_YEAR; 
IF C_AGE>= 85 THEN AGE_GRP=18;
ELSE AGE_GRP= FLOOR(C_AGE/5)+1
; RUN;

/*TARGET DATASET 준비*/
DATA TG_PRE0_BFC_&YEAR. (KEEP=INDI_DSCM_NO C_AGE AGE_GRP SEX_TYPE CASE_YN); 
SET DB.TG_PRE0_BFC&YEAR.;
CASE_YN=1;
IF C_AGE>= 85 THEN AGE_GRP=18;
ELSE AGE_GRP= FLOOR(C_AGE/5)+1
;RUN;

/*MATCH DATASET 준비, 사망일자가 2010년 이전인 사람 제거*/
DATA MATCH_&YEAR.; SET CTRL_BFC_&YEAR. TG_PRE0_BFC_&YEAR. ; RUN;

PROC SQL; CREATE TABLE MATCH_DTH_&YEAR. AS SELECT A.*, B.DTH_ASSMD_DT/*사망일자*/ 
FROM MATCH_&YEAR. AS A LEFT JOIN RAW.TG_DTH AS B 
ON A.INDI_DSCM_NO=B.INDI_DSCM_NO; QUIT;

DATA MATCH_DTH1_&YEAR.; SET MATCH_DTH_&YEAR.;
DTH_DATE=INPUT(PUT(DTH_ASSMD_DT,8.),yymmdd8.); /*SAS DATE FORMAT으로 변경*/
DTH_YEAR=YEAR(DTH_DATE); RUN;

PROC SQL; CREATE TABLE MATCHFULL_&YEAR. AS SELECT * FROM MATCH_DTH1_&YEAR. WHERE DTH_YEAR>=2010 OR DTH_DATE IS NULL;QUIT;

/*MATCH*/
PROC FREQ DATA=MATCHFULL_&YEAR.; TABLE SEX_TYPE*AGE_GRP*CASE_YN /NOCOL NOROW NOPERCENT;  RUN; 

PROC PSMATCH DATA=MATCHFULL_&YEAR.;
CLASS CASE_YN SEX_TYPE AGE_GRP;
PSMODEL CASE_YN(TREATED='1')=SEX_TYPE AGE_GRP;
MATCH METHOD=GREEDY (K=1 ORDER=RANDOM(SEED=2021)) EXACT=(SEX_TYPE AGE_GRP) ;
OUTPUT OUT(OBS=MATCH)=MATCHOUT_&YEAR. MATCHID=MATCH_ID;
RUN;
DATA MATCHOUT_&YEAR.(KEEP=INDI_DSCM_NO CASE_YN SEX_TYPE AGE_GRP MATCH_ID); SET MATCHOUT_&YEAR.; RUN;
PROC SORT DATA=MATCHOUT_&YEAR.; BY MATCH_ID;RUN;

PROC SQL; CREATE TABLE DB.MATCHOUT_&YEAR. AS SELECT A.*, B.C_AGE, B.DTH_DATE, B.DTH_YEAR 
FROM MATCHOUT_&YEAR. AS A LEFT JOIN MATCHFULL_&YEAR. AS B ON A.INDI_DSCM_NO=B.INDI_DSCM_NO; QUIT;
%MEND;

/*2010년 단년도 비교*/
%MATCH(2010);



/*이미 PRE_C=0 데이터로 매칭함*/

/*데이터셋 준비*/
PROC SQL; CREATE TABLE MATCH2010_LTC_TBNYBASE AS
SELECT DISTINCT A.*, B.*, INPUT(SUBSTR(B.APLY_YM,1,4),4.) AS APLY_YR, 
INTNX('MONTH',INPUT(B.APLY_YM,YYMMN6.),1)-1 AS APLY_YMD,
INTNX('MONTH',INPUT(B.APLY_YM,YYMMN6.),0) AS APLY_YMD2,

INTNX('MONTH',INPUT(B.GRADE_JUDG_YM,YYMMN6.),1)-1 AS GRADE_JUDG_YMD,
INTNX('MONTH',INPUT(B.GRADE_JUDG_YM,YYMMN6.),0) AS GRADE_JUDG_YMD2,

INPUT(RCGT_EDA_FR_DT,YYMMDD10.) AS RCGT_EDA_FR_YMD,
INPUT(RCGT_EDA_TO_DT,YYMMDD10.) AS RCGT_EDA_TO_YMD
FROM DB.MATCHOUT_2010 AS A
LEFT JOIN RAW.RVSN_HFVT_TBNYBASE AS B
ON A.INDI_DSCM_NO=B.INDI_DSCM_NO
; QUIT;
DATA  DB.MATCH2010_LTC_TBNYBASE; SET MATCH2010_LTC_TBNYBASE; 
FORMAT C_DATE YYMMDD10. APLY_YMD YYMMDD10. APLY_YMD2 YYMMDD10. 
GRADE_JUDG_YMD YYMMDD10. GRADE_JUDG_YMD2 YYMMDD10. 
RCGT_EDA_FR_YMD YYMMDD10. RCGT_EDA_TO_YMD YYMMDD10. 
;RUN;


/*이 5명은 2010년 자격DB에 있었는데 사망일이 2010년 이전임. 사망일 먼저 붙인 뒤 걸러낸 뒤에 매칭해야할 듯 */
/*PROC SQL; CREATE TABLE TEST2 AS SELECT * FROM RAW.BFC_2010 WHERE INDI_DSCM_NO IN (23219076
,30128641,
30542746,
32479826,
36797415); QUIT;

PROC SQL; CREATE TABLE TEST3 AS SELECT* FROM RAW.TG_DTH WHERE INDI_DSCM_NO IN (23219076
,30128641,
30542746,
32479826,
36797415); QUIT;*/


/*고령암환자와 일반인구의 생존 기간 별 노인장기요양보험 신청율(%) 비교*/
PROC SQL; CREATE TABLE SURVYR AS
SELECT DISTINCT CASE_YN, SEX_TYPE, CASE WHEN DTH_YEAR=2010 THEN '0-1년'
															  WHEN DTH_YEAR=2011 THEN '1-2년'
															  WHEN DTH_YEAR=2012 THEN '2-3년'
															  WHEN DTH_YEAR=2013 THEN '3-4년'
															  WHEN DTH_YEAR=2014 THEN '4-5년'
															  WHEN DTH_YEAR=2015 THEN '5-6년'
															  WHEN DTH_YEAR=2016 THEN '6-7년'
															  WHEN DTH_YEAR=2017 THEN '7-8년'
															  WHEN DTH_YEAR=2018 THEN '8-9년'
															  WHEN DTH_YEAR=2019 THEN '9-10년'
															  WHEN DTH_YEAR=2020 THEN '_10-11년'
															  WHEN DTH_YEAR=2021 THEN '_11-12년' END AS SURVYR, COUNT(DISTINCT INDI_DSCM_NO) AS CNT 
FROM DB.MATCH2010_LTC_TBNYBASE
WHERE C_AGE>=65 AND DTH_DATE IS NOT NULL
GROUP BY CASE_YN, SEX_TYPE, SURVYR
; QUIT; 

/*진단이후 신청률*/
PROC SQL; CREATE TABLE APLYAFTER_SURVYR AS
SELECT DISTINCT CASE_YN, SEX_TYPE, CASE WHEN DTH_YEAR=2010 THEN '0-1년'
															  WHEN DTH_YEAR=2011 THEN '1-2년'
															  WHEN DTH_YEAR=2012 THEN '2-3년'
															  WHEN DTH_YEAR=2013 THEN '3-4년'
															  WHEN DTH_YEAR=2014 THEN '4-5년'
															  WHEN DTH_YEAR=2015 THEN '5-6년'
															  WHEN DTH_YEAR=2016 THEN '6-7년'
															  WHEN DTH_YEAR=2017 THEN '7-8년'
															  WHEN DTH_YEAR=2018 THEN '8-9년'
															  WHEN DTH_YEAR=2019 THEN '9-10년'
															  WHEN DTH_YEAR=2020 THEN '_10-11년'
															  WHEN DTH_YEAR=2021 THEN '_11-12년' END AS SURVYR, COUNT(DISTINCT INDI_DSCM_NO) AS CNT 
FROM DB.MATCH2010_LTC_TBNYBASE
WHERE C_AGE>=65 AND  DTH_DATE IS NOT NULL AND 2010<=APLY_YR
GROUP BY CASE_YN, SEX_TYPE, SURVYR
; QUIT; 

/*고령암환자와 일반인구의 생존 기간 별 노인장기요양보험 인정율(%) 비교 */
PROC SQL; CREATE TABLE APLY_AFTER_GRADE AS
SELECT DISTINCT CASE_YN, SEX_TYPE, CASE WHEN DTH_YEAR=2010 THEN '0-1년'
															  WHEN DTH_YEAR=2011 THEN '1-2년'
															  WHEN DTH_YEAR=2012 THEN '2-3년'
															  WHEN DTH_YEAR=2013 THEN '3-4년'
															  WHEN DTH_YEAR=2014 THEN '4-5년'
															  WHEN DTH_YEAR=2015 THEN '5-6년'
															  WHEN DTH_YEAR=2016 THEN '6-7년'
															  WHEN DTH_YEAR=2017 THEN '7-8년'
															  WHEN DTH_YEAR=2018 THEN '8-9년'
															  WHEN DTH_YEAR=2019 THEN '9-10년'
															  WHEN DTH_YEAR=2020 THEN '_10-11년'
															  WHEN DTH_YEAR=2021 THEN '_11-12년' END AS SURVYR, COUNT(DISTINCT INDI_DSCM_NO) AS CNT 
FROM DB.MATCH2010_LTC_TBNYBASE
WHERE C_AGE>=65 AND DTH_DATE IS NOT NULL AND 2010<=APLY_YR AND GJU_RCGT_GRADE_CD IN ('1','2','3','4','5','6')
GROUP BY CASE_YN, SEX_TYPE, SURVYR ; QUIT; 


/*암진단 이후 신청년도 별 고령암환자의 노인장기요양 인정자의 인정등급 분포*/
PROC SQL; CREATE TABLE APLYYEAR_GRADE AS
SELECT DISTINCT CASE_YN, SEX_TYPE, GJU_RCGT_GRADE_CD,
CASE WHEN APLY_YR=2010 THEN '0-1년'
		WHEN APLY_YR=2011 THEN '1-2년'
		WHEN APLY_YR=2012 THEN '2-3년'
		WHEN APLY_YR=2013 THEN '3-4년'
		WHEN APLY_YR=2014 THEN '4-5년'
		WHEN APLY_YR=2015 THEN '5-6년'
		WHEN APLY_YR=2016 THEN '6-7년'
		WHEN APLY_YR=2017 THEN '7-8년'
		WHEN APLY_YR=2018 THEN '8-9년'
		WHEN APLY_YR=2019 THEN '9-10년'
		WHEN APLY_YR=2020 THEN '_10-11년' 
		WHEN APLY_YR=2021 THEN '_11-12년' END AS APLYYR, COUNT(DISTINCT INDI_DSCM_NO) AS CNT 
FROM DB.MATCH2010_LTC_TBNYBASE
WHERE C_AGE>=65 AND 2010<=APLY_YR AND GJU_RCGT_GRADE_CD IN ('1','2','3','4','5','6')
GROUP BY CASE_YN, SEX_TYPE, APLYYR,GJU_RCGT_GRADE_CD
ORDER BY CASE_YN, SEX_TYPE, GJU_RCGT_GRADE_CD
; QUIT; 


/*2010년 고령암환자와 매칭된 고령의 일반인구의 연도별 노인장기요양보험 인정조사 항목별 점수 비교*/
%MACRO APLYYR_SCOR(SCOR);

PROC SQL; CREATE TABLE APLYYEAR_&SCOR. AS
SELECT DISTINCT CASE_YN, SEX_TYPE, 
CASE WHEN APLY_YR=2010 THEN '0-1년'
		WHEN APLY_YR=2011 THEN '1-2년'
		WHEN APLY_YR=2012 THEN '2-3년'
		WHEN APLY_YR=2013 THEN '3-4년'
		WHEN APLY_YR=2014 THEN '4-5년'
		WHEN APLY_YR=2015 THEN '5-6년'
		WHEN APLY_YR=2016 THEN '6-7년'
		WHEN APLY_YR=2017 THEN '7-8년'
		WHEN APLY_YR=2018 THEN '8-9년'
		WHEN APLY_YR=2019 THEN '9-10년'
		WHEN APLY_YR=2020 THEN '_10-11년' 
		WHEN APLY_YR=2021 THEN '_11-12년' END AS APLYYR, 
MEAN( &SCOR. ) AS MEAN, STD( &SCOR.) AS STD
FROM DB.MATCH2010_LTC_TBNYBASE
WHERE C_AGE>=65 AND 2010<=APLY_YR AND GJU_RCGT_GRADE_CD IN ('1','2','3','4','5','6')
GROUP BY CASE_YN, SEX_TYPE, APLYYR
ORDER BY CASE_YN, SEX_TYPE
; QUIT; 

%MEND;

%APLYYR_SCOR(RCG_RCGT_SCOR); /*인정조사 인정점수*/
%APLYYR_SCOR(EVRDY_LIFE_ARFF_SCOR); /*(1) 일상생활 환산점수*/
%APLYYR_SCOR(PCT_ARFF_SCOR); /* (2) 인지환산점수*/
%APLYYR_SCOR(BHVR_ARFF_SCOR); /*(3) 행동환산점수*/
%APLYYR_SCOR(TNDNC_ARFF_SCOR); /*(4) 간호환산점수 */
%APLYYR_SCOR(REHBT_ARFF_SCOR); /*(5) 재활환산점수*/




/*휴지통*/
PROC SQL; CREATE TABLE MATCH2010_DTH AS SELECT A.*, B.DTH_ASSMD_DT/*사망일자*/ 
FROM MATCHOUT_2010 AS A LEFT JOIN RAW.TG_DTH AS B 
ON A.INDI_DSCM_NO=B.INDI_DSCM_NO; QUIT;

DATA DB.MATCH2010_DTH; SET MATCH2010_DTH;
DTH_DATE=INPUT(PUT(DTH_ASSMD_DT,8.),yymmdd8.); /*SAS DATE FORMAT으로 변경*/
DTH_YEAR=YEAR(DTH_DATE); RUN;

DATA CTRL_2010; SET MATCHOUT_2010; WHERE CASE_YN=0; RUN;

PROC SQL; CREATE TABLE CTRL_DTH AS SELECT A.*, B.DTH_ASSMD_DT/*사망일자*/ 
FROM CTRL_2010 AS A LEFT JOIN RAW.TG_DTH AS B 
ON A.INDI_DSCM_NO=B.INDI_DSCM_NO; QUIT;

DATA DB.CTRL2010_DTH; SET CTRL_DTH;
DTH_DATE=INPUT(PUT(DTH_ASSMD_DT,8.),yymmdd8.); /*SAS DATE FORMAT으로 변경*/
DTH_YEAR=YEAR(DTH_DATE); RUN;

PROC SQL; CREATE TABLE DB.CTRL2010_LTC_TBNYBASE AS
SELECT DISTINCT A.*, B.*, INPUT(SUBSTR(B.APLY_YM,1,4),4.) AS APLY_YR, 
INTNX('MONTH',INPUT(B.APLY_YM,YYMMN6.),1)-1 AS APLY_YMD,
INTNX('MONTH',INPUT(B.APLY_YM,YYMMN6.),0) AS APLY_YMD2,

INTNX('MONTH',INPUT(B.GRADE_JUDG_YM,YYMMN6.),1)-1 AS GRADE_JUDG_YMD,
INTNX('MONTH',INPUT(B.GRADE_JUDG_YM,YYMMN6.),0) AS GRADE_JUDG_YMD2,

INPUT(RCGT_EDA_FR_DT,YYMMDD10.) AS RCGT_EDA_FR_YMD,
INPUT(RCGT_EDA_TO_DT,YYMMDD10.) AS RCGT_EDA_TO_YMD
FROM DB.CTRL2010_DTH AS A
LEFT JOIN RAW.RVSN_HFVT_TBNYBASE AS B
ON A.INDI_DSCM_NO=B.INDI_DSCM_NO
; QUIT;
DATA  DB.CTRL2010_LTC_TBNYBASE; SET DB.CTRL2010_LTC_TBNYBASE; 
FORMAT C_DATE YYMMDD10. APLY_YMD YYMMDD10. APLY_YMD2 YYMMDD10. 
GRADE_JUDG_YMD YYMMDD10. GRADE_JUDG_YMD2 YYMMDD10. 
RCGT_EDA_FR_YMD YYMMDD10. RCGT_EDA_TO_YMD YYMMDD10. 
;RUN;

/*TARGET2010  데이터셋 준비*/
DATA TG_2010; SET MATCHOUT_2010; WHERE CASE_YN=1; RUN;

PROC SQL; CREATE TABLE TG2010_DTH AS SELECT A.*, B.DTH_ASSMD_DT/*사망일자*/ 
FROM TG_2010 AS A LEFT JOIN RAW.TG_DTH AS B 
ON A.INDI_DSCM_NO=B.INDI_DSCM_NO; QUIT;

DATA DB.TG2010_DTH; SET TG2010_DTH;
DTH_DATE=INPUT(PUT(DTH_ASSMD_DT,8.),yymmdd8.); /*SAS DATE FORMAT으로 변경*/
DTH_YEAR=YEAR(DTH_DATE); RUN;

PROC SQL; CREATE TABLE DB.TG2010_LTC_TBNYBASE AS
SELECT DISTINCT A.*, B.*, INPUT(SUBSTR(B.APLY_YM,1,4),4.) AS APLY_YR, 
INTNX('MONTH',INPUT(B.APLY_YM,YYMMN6.),1)-1 AS APLY_YMD,
INTNX('MONTH',INPUT(B.APLY_YM,YYMMN6.),0) AS APLY_YMD2,

INTNX('MONTH',INPUT(B.GRADE_JUDG_YM,YYMMN6.),1)-1 AS GRADE_JUDG_YMD,
INTNX('MONTH',INPUT(B.GRADE_JUDG_YM,YYMMN6.),0) AS GRADE_JUDG_YMD2,

INPUT(RCGT_EDA_FR_DT,YYMMDD10.) AS RCGT_EDA_FR_YMD,
INPUT(RCGT_EDA_TO_DT,YYMMDD10.) AS RCGT_EDA_TO_YMD
FROM DB.TG2010_DTH AS A
LEFT JOIN RAW.RVSN_HFVT_TBNYBASE AS B
ON A.INDI_DSCM_NO=B.INDI_DSCM_NO
; QUIT;
DATA  DB.TG2010_LTC_TBNYBASE; SET DB.TG2010_LTC_TBNYBASE; 
FORMAT C_DATE YYMMDD10. APLY_YMD YYMMDD10. APLY_YMD2 YYMMDD10. 
GRADE_JUDG_YMD YYMMDD10. GRADE_JUDG_YMD2 YYMMDD10. 
RCGT_EDA_FR_YMD YYMMDD10. RCGT_EDA_TO_YMD YYMMDD10. 
;RUN;
